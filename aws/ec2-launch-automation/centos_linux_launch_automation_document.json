{
    "description": "Launch Automation for CentOS Linux instance",
    "schemaVersion": "0.3",
    "parameters": {
        "instanceIds": {
            "type": "StringList",
            "description": "InstanceIds to run launch setup"
        }
    },
    "mainSteps": [{
            "name": "waitForInstancesToStart",
            "action": "aws:changeInstanceState",
            "timeoutSeconds": 600,
            "onFailure": "Abort",
            "inputs": {
                "InstanceIds": [
                    "{{instanceIds}}"
                ],
                "CheckStateOnly": true,
                "DesiredState": "running"
            },
            "nextStep": "changehostname"
        },
        {
            "name": "changehostname",
            "action": "aws:runCommand",
            "onFailure": "Abort",
            "inputs": {
                "DocumentName": "AWS-RunShellScript",
                "InstanceIds": ["{{instanceIds}}"],
                "Parameters": {
                    "commands": [
                        "sudo su -",
                        "instanceid=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
                        "domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\n",
                        "hostname=$(aws ec2 describe-instances --instance-id $instanceid --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`hostname`].Value' --output text)\n",
                        "echo $hostname > /etc/hostname\n",
                        "echo 127.0.0.1 $hostname.$domain $hostname > /etc/hosts\n",
                        "reboot"
                    ]
                }
            },
            "nextStep": "waitForInstancesToStartAfterReboot"
        },
        {
            "name": "waitForInstancesToStartAfterReboot",
            "action": "aws:changeInstanceState",
            "timeoutSeconds": 600,
            "onFailure": "Abort",
            "inputs": {
                "InstanceIds": [
                    "{{instanceIds}}"
                ],
                "CheckStateOnly": true,
                "DesiredState": "running"
            },
            "nextStep": "joinDomain"
        },
        {
            "name": "joinDomain",
            "action": "aws:runCommand",
            "onFailure": "Abort",
            "inputs": {
                "DocumentName": "AWS-RunShellScript",
                "InstanceIds": ["{{instanceIds}}"],
                "Parameters": {
                    "commands": [
                        "domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\n",
                        "ouPath=$(aws ssm get-parameters --names /domain/ou_path --region ap-south-1 --query 'Parameters[0].Value' --output text)\n",
                        "username=$(aws ssm get-parameters --names /domain/username --region ap-south-1 --query 'Parameters[0].Value' --output text)\n",
                        "password=$(aws ssm get-parameters --names /domain/password --with-decryption --region ap-south-1 --query 'Parameters[0].Value' --output text)\n",
                        "echo $password | sudo realm join --membership-software=adcli -U $username --computer-ou=$ouPath $domain\n",
                        "sudo shutdown -r 1"
                    ]
                }
            }
        },
        {
            "name": "waitForInstancesToStartAfterdomainjoin",
            "action": "aws:changeInstanceState",
            "timeoutSeconds": 600,
            "onFailure": "Abort",
            "inputs": {
                "InstanceIds": [
                    "{{instanceIds}}"
                ],
                "CheckStateOnly": true,
                "DesiredState": "running"
            },
            "nextStep": "modifysssd"
        },
        {
            "name": "modifysssd",
            "action": "aws:runCommand",
            "onFailure": "Abort",
            "inputs": {
                "DocumentName": "AWS-RunShellScript",
                "InstanceIds": ["{{instanceIds}}"],
                "Parameters": {
                    "commands": [
                     "sudo su -\n",
                     "cp /etc/sssd/sssd.conf /etc/sssd/sssd.conf.backup\n",
                     "echo dyndns_update = true > /etc/sssd/sssd.conf\n",
                     "echo dyndns_refresh_interval = 43200 > /etc/sssd/sssd.conf\n",
                     "echo dyndns_update_ptr = true > /etc/sssd/sssd.conf\n",
                     "echo dyndns_ttl = 3600 > /etc/sssd/sssd.conf\n",
                     "/bin/systemctl restart sssd.service\n",
                     "cp /etc/ssh/sshd_config  /etc/ssh/sshd_config.backup\n",
                     "sed -i -e 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\n",
                     "/bin/systemctl restart sshd.service\n",
                     "echo 'CIOCloudmanagement@corp.mphasis.com ALL=(ALL) ALL' > /etc/sudoers.d/CIOCloudmanagement"
                    ]
                }
            }
        }
    ]
}